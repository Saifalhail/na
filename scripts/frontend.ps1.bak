# Nutrition AI Frontend - Windows PowerShell Script
# Usage: .\frontend.ps1

# Colors for output
$Host.UI.RawUI.ForegroundColor = "White"

function Write-Info { Write-Host "[INFO]" -ForegroundColor Green -NoNewline; Write-Host " $args" }
function Write-Error { Write-Host "[ERROR]" -ForegroundColor Red -NoNewline; Write-Host " $args" }
function Write-Warn { Write-Host "[WARN]" -ForegroundColor Yellow -NoNewline; Write-Host " $args" }
function Write-Success { Write-Host "[SUCCESS]" -ForegroundColor Cyan -NoNewline; Write-Host " $args" }
function Write-Debug { Write-Host "[DEBUG]" -ForegroundColor Blue -NoNewline; Write-Host " $args" }

Write-Host "Nutrition AI Frontend (Windows)" -ForegroundColor Green
Write-Host "==================================" -ForegroundColor Green

# Get project root
$ProjectRoot = Split-Path -Parent $PSScriptRoot
Set-Location $ProjectRoot

# Platform detection
$Platform = "windows"
Write-Info "Detected platform: $Platform"

# Get all available IPs
function Get-AllIPs {
    $ips = @("127.0.0.1", "localhost")
    
    # Get all network adapters with IPv4 addresses
    $adapters = Get-NetIPAddress -AddressFamily IPv4 | Where-Object {
        $_.IPAddress -notlike "169.254.*" -and 
        $_.IPAddress -ne "127.0.0.1" -and
        $_.InterfaceAlias -notlike "*Loopback*"
    }
    
    foreach ($adapter in $adapters) {
        $ips += $adapter.IPAddress
    }
    
    # For WSL environments, try to get WSL IP
    $wslIP = (Get-NetIPAddress -InterfaceAlias "vEthernet (WSL)" -AddressFamily IPv4 -ErrorAction SilentlyContinue).IPAddress
    if ($wslIP) {
        $ips += $wslIP
    }
    
    return $ips | Select-Object -Unique
}

# Test if backend is reachable
function Test-BackendUrl {
    param(
        [string]$url,
        [int]$timeout = 2000
    )
    
    Write-Debug "Testing backend at: $url"
    
    try {
        $response = Invoke-WebRequest -Uri "$url/api/v1/health/" -TimeoutSec ($timeout/1000) -UseBasicParsing -ErrorAction Stop
        if ($response.StatusCode -eq 200) {
            Write-Success "Backend reachable at: $url"
            return $true
        }
    }
    catch {
        Write-Debug "Backend not reachable at: $url"
    }
    
    return $false
}

# Find working backend URL
function Find-BackendUrl {
    Write-Info "Searching for backend server..."
    
    # Check if backend IP was saved
    $BackendIpFile = Join-Path $ProjectRoot ".backend_ip"
    if (Test-Path $BackendIpFile) {
        $savedIp = Get-Content $BackendIpFile -Raw -Encoding UTF8 | ForEach-Object { $_.Trim() }
        if ($savedIp -and (Test-BackendUrl "http://${savedIp}:8000" 1000)) {
            return $savedIp
        }
    }
    
    # Test all available IPs
    $ips = Get-AllIPs
    foreach ($ip in $ips) {
        if (Test-BackendUrl "http://${ip}:8000" 1000) {
            return $ip
        }
    }
    
    return $null
}

# Clean up processes
function Stop-ExistingProcesses {
    Write-Info "Cleaning up existing processes..."
    
    # Stop Expo/Metro processes
    Get-Process -Name "node*" -ErrorAction SilentlyContinue | Where-Object {
        $_.CommandLine -like "*expo*" -or $_.CommandLine -like "*metro*"
    } | Stop-Process -Force -ErrorAction SilentlyContinue
    
    # Kill ports
    $ports = @(8081, 19000, 19001, 19002)
    foreach ($port in $ports) {
        $tcpConnections = Get-NetTCPConnection -LocalPort $port -ErrorAction SilentlyContinue
        foreach ($conn in $tcpConnections) {
            Stop-Process -Id $conn.OwningProcess -Force -ErrorAction SilentlyContinue
        }
    }
    
    Start-Sleep -Seconds 1
}

# Update .env file
function Update-EnvFile {
    param([string]$backendIp)
    
    $envFile = Join-Path $ProjectRoot "frontend\.env"
    Write-Info "üìù Updating .env file with backend IP: $backendIp"
    
    $envContent = @"
# API Configuration - Auto-generated by frontend.ps1
# Generated at: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")
# Backend IP: $backendIp

# Main API URL
EXPO_PUBLIC_API_URL=http://${backendIp}:8000

# Platform-specific URLs (all pointing to same backend)
EXPO_PUBLIC_API_URL_ANDROID=http://${backendIp}:8000
EXPO_PUBLIC_API_URL_IOS=http://${backendIp}:8000
EXPO_PUBLIC_API_URL_PHYSICAL=http://${backendIp}:8000

# API Version
EXPO_PUBLIC_API_VERSION=v1

# OAuth Configuration
EXPO_PUBLIC_GOOGLE_OAUTH_CLIENT_ID=your_google_client_id_here

# Environment
EXPO_PUBLIC_ENVIRONMENT=development

# Feature Flags
EXPO_PUBLIC_ENABLE_ANALYTICS=false
EXPO_PUBLIC_ENABLE_CRASH_REPORTING=false
EXPO_PUBLIC_ENABLE_SOCIAL_AUTH=true
EXPO_PUBLIC_ENABLE_AI_ANALYSIS=true
EXPO_PUBLIC_ENABLE_OFFLINE_MODE=true
EXPO_PUBLIC_ENABLE_DEMO_MODE=true

# Network Configuration - Increased timeouts for reliability
EXPO_PUBLIC_API_TIMEOUT=10000
EXPO_PUBLIC_CONNECTIVITY_TEST_TIMEOUT=5000

# Performance Optimization
EXPO_PUBLIC_ENABLE_PERFORMANCE_MONITORING=true
EXPO_PUBLIC_PERFORMANCE_SLOW_RENDER_THRESHOLD=50
"@

    $envContent | Out-File -FilePath $envFile -Encoding UTF8
    Write-Success '.env file updated successfully'
}

# Main execution
try {
    # Clean up first
    Stop-ExistingProcesses
    
    # Navigate to frontend directory
    $FrontendPath = Join-Path $ProjectRoot "frontend"
    if (-not (Test-Path $FrontendPath)) {
        Write-Error "Frontend directory not found!"
        exit 1
    }
    
    Set-Location $FrontendPath
    
    # Check Node.js
    if (-not (Get-Command node -ErrorAction SilentlyContinue)) {
        Write-Error "Node.js not found!"
        Write-Error "Please install Node.js from: https://nodejs.org/"
        exit 1
    }
    
    Write-Info "Node.js version: $(node --version)"
    Write-Info "npm version: $(npm --version)"
    
    # Install dependencies if needed
    if (-not (Test-Path "node_modules") -or 
        (Get-Item "package.json").LastWriteTime -gt (Get-Item "node_modules" -ErrorAction SilentlyContinue).LastWriteTime) {
        Write-Info "Installing dependencies..."
        npm install
        if ($LASTEXITCODE -ne 0) {
            Write-Error "Failed to install dependencies"
            Write-Warn "Trying to clear cache and retry..."
            npm cache clean --force
            npm install
        }
    } else {
        Write-Success "Dependencies already installed"
    }
    
    # Find backend URL
    Write-Info "Looking for backend server..."
    $BackendIP = Find-BackendUrl
    
    if ($BackendIP) {
        Write-Success "Found backend at: http://${BackendIP}:8000"
        Update-EnvFile $BackendIP
    } else {
        Write-Warn "No backend server found!"
        Write-Warn "Starting in offline/demo mode"
        Write-Warn ""
        Write-Warn "To start the backend, run in another terminal:"
        Write-Warn "  .\scripts\backend.ps1"
        
        # Use localhost as fallback
        $BackendIP = "127.0.0.1"
        Update-EnvFile $BackendIP
    }
    
    # Clear Metro cache
    Write-Info "Clearing Metro cache..."
    Remove-Item -Path ".metro-cache", ".expo", "node_modules/.cache" -Recurse -Force -ErrorAction SilentlyContinue
    
    # Get local IP for mobile access
    $LocalIPs = Get-AllIPs | Where-Object { $_ -ne "127.0.0.1" -and $_ -ne "localhost" }
    $LocalIP = if ($LocalIPs) { $LocalIPs[0] } else { "localhost" }
    
    Write-Host ""
    Write-Info "Starting Expo development server..."
    Write-Info "Local IP for mobile: $LocalIP"
    Write-Info "Backend API: http://${BackendIP}:8000"
    Write-Host ""
    Write-Info "Mobile App Instructions:"
    Write-Info '1. Install "Expo Go" app on your phone'
    Write-Info "2. Make sure your phone is on the same WiFi network"
    Write-Info "3. Scan the QR code that appears below"
    Write-Host ""
    Write-Info "Alternative Connection Methods:"
    Write-Info '   - Press "s" in terminal to switch connection mode'
    Write-Info "   - Manual URL: exp://${LocalIP}:8081"
    Write-Host ""
    Write-Info "Troubleshooting Tips:"
    Write-Info '   - If "Network Error": Check if backend is running (.\scripts\backend.ps1)'
    Write-Info '   - If QR code doesn''t work: Try manual URL in Expo Go'
    Write-Info '   - If tunnel fails: Press "s" to switch to LAN mode'
    Write-Host ""
    Write-Info "Press Ctrl+C to stop"
    Write-Host ""
    
    # Start Expo
    $ExpoArgs = @("start", "--clear")
    
    if ($LocalIP -ne "localhost") {
        Write-Info "Using LAN mode with IP: $LocalIP"
        $ExpoArgs += "--lan"
    } else {
        Write-Info "Using tunnel mode for remote access"
        $ExpoArgs += "--tunnel"
    }
    
    & npx expo @ExpoArgs
}
catch {
    Write-Error "An error occurred: $($_.Exception.Message)"
    exit 1
}
finally {
    # Cleanup
    Stop-ExistingProcesses
}