#!/usr/bin/env node

/**
 * Performance optimization script for React Native frontend
 * This script helps automate common performance fixes
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// Configuration
const SRC_DIR = path.join(__dirname, '../src');
const COMPONENTS_TO_MEMOIZE = [
  'NetworkStatusIndicator',
  'IconFallback',
  'SplashScreen',
  'SmartCameraOverlay',
  'CustomTabBar',
  'ProfileAvatar',
  'GoogleLogo',
  'FeedbackButton',
  'NutritionDashboard',
  'MealTypeSelector'
];

// Helper functions
function readFile(filePath) {
  return fs.readFileSync(filePath, 'utf8');
}

function writeFile(filePath, content) {
  fs.writeFileSync(filePath, content, 'utf8');
}

function findFiles(pattern) {
  return glob.sync(pattern, { cwd: SRC_DIR, absolute: true });
}

// 1. Add React.memo to components
function addMemoToComponent(componentName) {
  const files = findFiles(`**/${componentName}.tsx`);
  
  files.forEach(file => {
    let content = readFile(file);
    
    // Check if already memoized
    if (content.includes('React.memo') || content.includes('memo(')) {
      console.log(`‚úì ${componentName} already memoized`);
      return;
    }
    
    // Pattern to match the export
    const exportPattern = new RegExp(
      `export const ${componentName}.*?=.*?\\((.+?)\\)\\s*=>\\s*{`,
      's'
    );
    
    if (exportPattern.test(content)) {
      // Add React.memo
      content = content.replace(
        exportPattern,
        `export const ${componentName} = React.memo(($1) => {`
      );
      
      // Find the closing of the component and add closing parenthesis
      const lines = content.split('\n');
      let braceCount = 0;
      let componentStart = false;
      let lastExportLine = -1;
      
      for (let i = 0; i < lines.length; i++) {
        if (lines[i].includes(`export const ${componentName}`)) {
          componentStart = true;
        }
        
        if (componentStart) {
          braceCount += (lines[i].match(/{/g) || []).length;
          braceCount -= (lines[i].match(/}/g) || []).length;
          
          if (braceCount === 0 && lines[i].includes('}')) {
            lastExportLine = i;
            break;
          }
        }
      }
      
      if (lastExportLine > -1) {
        lines[lastExportLine] = lines[lastExportLine].replace(/}(\s*);?$/, '});');
        content = lines.join('\n');
        
        writeFile(file, content);
        console.log(`‚úÖ Added React.memo to ${componentName}`);
      }
    }
  });
}

// 2. Remove console logs in production
function removeConsoleLogs() {
  const files = findFiles('**/*.{ts,tsx}');
  let totalRemoved = 0;
  
  files.forEach(file => {
    let content = readFile(file);
    const originalLength = content.length;
    
    // Remove console statements but keep error handling
    content = content.replace(
      /console\.(log|warn|info|debug)\([^)]*\);?\s*\n?/g,
      ''
    );
    
    if (content.length !== originalLength) {
      writeFile(file, content);
      const removed = (originalLength - content.length);
      totalRemoved += removed;
      console.log(`‚úÖ Removed console logs from ${path.basename(file)}`);
    }
  });
  
  console.log(`\nüìä Total characters removed: ${totalRemoved}`);
}

// 3. Extract magic numbers to constants
function createConstantsFile() {
  const constantsContent = `/**
 * Application-wide constants
 * Auto-generated by performance optimization script
 */

// Nutrition Goals Defaults
export const DEFAULT_NUTRITION_GOALS = {
  CALORIES: 2000,
  PROTEIN: 50,
  CARBS: 250,
  FAT: 65,
  WATER: 2000,
} as const;

// BMR Calculation Constants
export const BMR_CONSTANTS = {
  WEIGHT_MULTIPLIER: 10,
  HEIGHT_MULTIPLIER: 6.25,
  AGE_MULTIPLIER: 5,
  MALE_OFFSET: 5,
  FEMALE_OFFSET: 161,
  CM_TO_M: 100,
} as const;

// Activity Level Multipliers
export const ACTIVITY_MULTIPLIERS = {
  SEDENTARY: 1.2,
  LIGHT: 1.375,
  MODERATE: 1.55,
  ACTIVE: 1.725,
  VERY_ACTIVE: 1.9,
} as const;

// UI Constants
export const UI_CONSTANTS = {
  LOGO_SIZE: 120,
  HEADER_LOGO_SIZE: 48,
  ANIMATION_DURATION: 300,
  DEBOUNCE_DELAY: 500,
  REFRESH_TIMEOUT: 1500,
  MIN_TOUCH_SIZE: 44,
} as const;

// API Constants
export const API_TIMEOUTS = {
  DEFAULT: 10000,
  UPLOAD: 30000,
  ANALYSIS: 60000,
} as const;

// Cache Durations (in milliseconds)
export const CACHE_DURATIONS = {
  USER_DATA: 5 * 60 * 1000, // 5 minutes
  MEAL_DATA: 10 * 60 * 1000, // 10 minutes
  STATIC_DATA: 60 * 60 * 1000, // 1 hour
} as const;
`;

  const constantsPath = path.join(SRC_DIR, 'constants', 'appConstants.ts');
  writeFile(constantsPath, constantsContent);
  console.log(`‚úÖ Created constants file at ${constantsPath}`);
}

// 4. Add performance monitoring wrapper
function createPerformanceWrapper() {
  const wrapperContent = `import React from 'react';

/**
 * HOC to wrap components with performance monitoring
 */
export function withPerformanceMonitoring<P extends object>(
  Component: React.ComponentType<P>,
  componentName: string
) {
  return React.memo((props: P) => {
    const renderStart = React.useRef(performance.now());
    
    React.useEffect(() => {
      const renderTime = performance.now() - renderStart.current;
      if (__DEV__ && renderTime > 16.67) { // More than 1 frame
        console.warn(\`[Performance] \${componentName} slow render: \${renderTime.toFixed(2)}ms\`);
      }
    });
    
    return <Component {...props} />;
  });
}
`;

  const wrapperPath = path.join(SRC_DIR, 'utils', 'performanceWrapper.tsx');
  writeFile(wrapperPath, wrapperContent);
  console.log(`‚úÖ Created performance wrapper at ${wrapperPath}`);
}

// Main execution
console.log('üöÄ Starting performance optimizations...\n');

// Step 1: Add React.memo to components
console.log('Step 1: Adding React.memo to components...');
COMPONENTS_TO_MEMOIZE.forEach(component => {
  try {
    addMemoToComponent(component);
  } catch (error) {
    console.error(`‚ùå Failed to memoize ${component}:`, error.message);
  }
});

// Step 2: Remove console logs
console.log('\nStep 2: Removing console logs...');
if (process.argv.includes('--remove-logs')) {
  removeConsoleLogs();
} else {
  console.log('‚ö†Ô∏è  Skipping console log removal. Use --remove-logs flag to enable.');
}

// Step 3: Create constants file
console.log('\nStep 3: Creating constants file...');
createConstantsFile();

// Step 4: Create performance wrapper
console.log('\nStep 4: Creating performance monitoring wrapper...');
createPerformanceWrapper();

console.log('\n‚ú® Performance optimizations complete!');
console.log('\nNext steps:');
console.log('1. Review the changes with git diff');
console.log('2. Update imports to use the new constants file');
console.log('3. Run tests to ensure nothing broke');
console.log('4. Consider using the performance wrapper for heavy components');