const { getDefaultConfig } = require('expo/metro-config');

const config = getDefaultConfig(__dirname);

// Performance optimizations
config.transformer = {
  ...config.transformer,
  minifierPath: 'metro-minify-terser',
  minifierConfig: {
    keep_fnames: true,
    mangle: {
      keep_fnames: true,
    },
    compress: {
      drop_console: true, // Remove console logs in production
      reduce_funcs: false,
    },
    output: {
      ascii_only: true,
      quote_style: 3,
      wrap_iife: true,
    },
  },
};

// Optimize resolution
config.resolver = {
  ...config.resolver,
  // Improve module resolution performance
  hasteImplModulePath: null,
  // Block list for files we don't need
  blockList: [
    /.*\.test\.(js|jsx|ts|tsx)$/,
    /.*\/__tests__\/.*/,
    /.*\.spec\.(js|jsx|ts|tsx)$/,
    /.*\.stories\.(js|jsx|ts|tsx)$/,
  ],
};

// Cache configuration for faster rebuilds
config.cacheStores = [
  new (require('metro-cache').FileStore)({
    root: './.metro-cache',
  }),
];

// Watcher configuration
config.watchFolders = [__dirname];
config.resetCache = false;

// File watcher optimizations for OneDrive and WSL
config.watchman = false; // Disable watchman on Windows/WSL
config.watcher = {
  ...config.watcher,
  watchman: {
    useWatchman: false, // Disable watchman
  },
  // Use polling instead of native file watching on Windows/WSL
  additionalExts: ['cjs', 'mjs'],
};

// Additional resolver optimizations
config.resolver.blockList = [
  ...config.resolver.blockList || [],
  // Exclude temporary files and OneDrive sync files
  /.*\.tmp$/,
  /.*~$/,
  /.*\.swp$/,
  /.*\.swo$/,
  /.*\.(crdownload|part|download)$/,
  /.*-[A-Za-z0-9]{8}$/, // Temporary files with random suffixes
  /\.bin\/\.[^/]+$/, // Hidden files in .bin
];

// Server configuration for better stability
config.server = {
  ...config.server,
  enhanceMiddleware: (middleware) => {
    return (req, res, next) => {
      // Skip watching for temporary files
      if (req.url && req.url.includes('.bin/.')) {
        res.statusCode = 200;
        res.end();
        return;
      }
      return middleware(req, res, next);
    };
  },
};

module.exports = config;