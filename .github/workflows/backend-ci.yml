name: Backend CI

on:
  push:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]
  pull_request:
    branches: [ main, develop ]
    paths: [ 'backend/**' ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_nutritiondb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov pytest-django

    - name: Set up environment variables
      run: |
        cd backend
        cat > .env << EOF
        DEBUG=True
        SECRET_KEY=test-secret-key-for-ci-only
        DATABASE_URL=postgres://postgres:postgres@localhost:5432/test_nutritiondb
        REDIS_URL=redis://localhost:6379/0
        GEMINI_API_KEY=test-api-key
        EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
        ALLOWED_HOSTS=localhost,127.0.0.1
        CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
        EOF

    - name: Run migrations
      run: |
        cd backend
        python manage.py migrate --settings=core.settings.testing

    - name: Run linting
      run: |
        cd backend
        pip install black isort flake8
        black --check --diff .
        isort --check-only --diff .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run security checks
      run: |
        cd backend
        pip install bandit safety
        bandit -r . -x "*/tests/*,*/venv/*" -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true

    - name: Run tests with coverage
      run: |
        cd backend
        coverage run -m pytest --tb=short -v
        coverage report --show-missing
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
          backend/coverage.xml

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install quality tools
      run: |
        cd backend
        pip install black isort flake8 mypy pylint

    - name: Check code formatting
      run: |
        cd backend
        black --check .

    - name: Check import sorting
      run: |
        cd backend
        isort --check-only .

    - name: Run flake8
      run: |
        cd backend
        flake8 .

    - name: Run type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports || true

    - name: Run pylint
      run: |
        cd backend
        pylint **/*.py --exit-zero --output-format=json > pylint-report.json || true

    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: quality-reports
        path: |
          backend/pylint-report.json