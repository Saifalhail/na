"""
Tests for malware scanning functionality.
"""
import os
import tempfile
import hashlib
from unittest.mock import Mock, patch, MagicMock
from django.test import TestCase, override_settings
from django.core.files.uploadedfile import SimpleUploadedFile
from django.core.exceptions import ValidationError

from api.services.malware_scanning_service import (
    ClamAVScanner, VirusTotalScanner, MalwareScanningService,
    MalwareScanResult
)
from api.security.file_security import SecureFileHandler
from api.models import MalwareScanLog
from api.factories import UserFactory


class MalwareScanResultTestCase(TestCase):
    """Test MalwareScanResult class."""
    
    def test_clean_result(self):
        """Test clean scan result."""
        result = MalwareScanResult(
            is_clean=True,
            scanner='test_scanner',
            scan_time=1.5
        )
        
        self.assertTrue(result.is_clean)
        self.assertEqual(result.scanner, 'test_scanner')
        self.assertEqual(result.scan_time, 1.5)
        self.assertEqual(result.threats, [])
        
        result_dict = result.to_dict()
        self.assertTrue(result_dict['is_clean'])
        self.assertEqual(result_dict['scanner'], 'test_scanner')
    
    def test_infected_result(self):
        """Test infected scan result."""
        threats = [{'threat': 'EICAR-Test-File'}]
        result = MalwareScanResult(
            is_clean=False,
            scanner='clamav',
            threats=threats,
            details={'engine': 'ClamAV 0.105.1'}
        )
        
        self.assertFalse(result.is_clean)
        self.assertEqual(result.threats, threats)
        self.assertEqual(result.details['engine'], 'ClamAV 0.105.1')


class ClamAVScannerTestCase(TestCase):
    """Test ClamAV scanner functionality."""
    
    def setUp(self):
        """Set up test data."""
        self.test_file_content = b"This is a test file content"
        
    @override_settings(
        CLAMAV_SOCKET_PATH='/nonexistent/socket',
        CLAMAV_CLAMSCAN_PATH='/nonexistent/clamscan'
    )
    def test_scanner_not_available(self):
        """Test scanner when ClamAV is not available."""
        scanner = ClamAVScanner()
        self.assertFalse(scanner.enabled)
    
    @patch('api.services.malware_scanning_service.subprocess.run')
    def test_clamscan_version_check(self, mock_run):
        """Test ClamAV version check with clamscan binary."""
        mock_run.return_value = Mock(returncode=0, stdout="ClamAV 0.105.1")
        
        scanner = ClamAVScanner()
        # Scanner should be enabled if clamscan works
        self.assertTrue(scanner.enabled)
        self.assertFalse(scanner.use_daemon)
    
    @patch('api.services.malware_scanning_service.subprocess.run')
    def test_scan_clean_file(self, mock_run):
        """Test scanning a clean file."""
        mock_run.side_effect = [
            Mock(returncode=0, stdout="ClamAV 0.105.1"),  # Version check
            Mock(returncode=0, stdout="OK", stderr="")      # Scan result
        ]
        
        scanner = ClamAVScanner()
        
        with tempfile.NamedTemporaryFile() as temp_file:
            temp_file.write(self.test_file_content)
            temp_file.flush()
            
            result = scanner.scan_file(temp_file.name)
            
            self.assertTrue(result.is_clean)
            self.assertEqual(result.scanner, 'clamav_binary')
            self.assertEqual(result.threats, [])
    
    @patch('api.services.malware_scanning_service.subprocess.run')
    def test_scan_infected_file(self, mock_run):
        """Test scanning an infected file."""
        mock_run.side_effect = [
            Mock(returncode=0, stdout="ClamAV 0.105.1"),  # Version check
            Mock(returncode=1, stdout="/tmp/test: EICAR-Test-File FOUND", stderr="")  # Infected
        ]
        
        scanner = ClamAVScanner()
        
        with tempfile.NamedTemporaryFile() as temp_file:
            temp_file.write(self.test_file_content)
            temp_file.flush()
            
            result = scanner.scan_file(temp_file.name)
            
            self.assertFalse(result.is_clean)
            self.assertEqual(result.scanner, 'clamav_binary')
            self.assertEqual(len(result.threats), 1)
            self.assertEqual(result.threats[0]['threat'], 'EICAR-Test-File')
    
    @patch('api.services.malware_scanning_service.os.path.exists')
    @patch('api.services.malware_scanning_service.pyclamd')
    def test_daemon_scan(self, mock_pyclamd, mock_exists):
        """Test scanning with ClamAV daemon."""
        mock_exists.return_value = True
        
        # Mock daemon
        mock_daemon = Mock()
        mock_daemon.ping.return_value = True
        mock_daemon.scan_file.return_value = None  # Clean file
        mock_pyclamd.ClamdUnixSocket.return_value = mock_daemon
        
        scanner = ClamAVScanner()
        self.assertTrue(scanner.enabled)
        self.assertTrue(scanner.use_daemon)
        
        with tempfile.NamedTemporaryFile() as temp_file:
            result = scanner.scan_file(temp_file.name)
            
            self.assertTrue(result.is_clean)
            self.assertEqual(result.scanner, 'clamav_daemon')


class VirusTotalScannerTestCase(TestCase):
    """Test VirusTotal scanner functionality."""
    
    @override_settings(VIRUSTOTAL_API_KEY='')
    def test_scanner_not_configured(self):
        """Test scanner when API key is not configured."""
        scanner = VirusTotalScanner()
        self.assertFalse(scanner.enabled)
    
    @override_settings(VIRUSTOTAL_API_KEY='test_api_key')
    def test_scanner_configured(self):
        """Test scanner when API key is configured."""
        scanner = VirusTotalScanner()
        self.assertTrue(scanner.enabled)
    
    @override_settings(VIRUSTOTAL_API_KEY='test_api_key')
    @patch('api.services.malware_scanning_service.requests.get')
    def test_scan_clean_file_hash(self, mock_get):
        """Test scanning a clean file hash."""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'response_code': 1,
            'positives': 0,
            'total': 60,
            'scan_date': '2023-01-01 00:00:00',
            'permalink': 'https://virustotal.com/file/...'
        }
        mock_get.return_value = mock_response
        
        scanner = VirusTotalScanner()
        result = scanner.scan_file_hash('test_hash')
        
        self.assertTrue(result.is_clean)
        self.assertEqual(result.scanner, 'virustotal')
        self.assertEqual(result.details['positives'], 0)
        self.assertEqual(result.details['total'], 60)
    
    @override_settings(VIRUSTOTAL_API_KEY='test_api_key')
    @patch('api.services.malware_scanning_service.requests.get')
    def test_scan_infected_file_hash(self, mock_get):
        """Test scanning an infected file hash."""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'response_code': 1,
            'positives': 5,
            'total': 60,
            'scans': {
                'ClamAV': {'detected': True, 'result': 'EICAR-Test-File', 'version': '0.105.1'},
                'Avast': {'detected': True, 'result': 'EICAR_Test_File', 'version': '22.1.0'},
                'Norton': {'detected': False, 'result': None, 'version': '1.0.0'}
            }
        }
        mock_get.return_value = mock_response
        
        scanner = VirusTotalScanner()
        result = scanner.scan_file_hash('test_hash')
        
        self.assertFalse(result.is_clean)
        self.assertEqual(result.scanner, 'virustotal')
        self.assertEqual(result.details['positives'], 5)
        self.assertEqual(len(result.threats), 2)  # Only detected threats
    
    @override_settings(VIRUSTOTAL_API_KEY='test_api_key')
    @patch('api.services.malware_scanning_service.requests.get')
    def test_file_not_found(self, mock_get):
        """Test scanning when file is not found in VirusTotal."""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            'response_code': 0,
            'verbose_msg': 'The requested resource is not among the finished, queued or pending scans'
        }
        mock_get.return_value = mock_response
        
        scanner = VirusTotalScanner()
        result = scanner.scan_file_hash('unknown_hash')
        
        self.assertTrue(result.is_clean)
        self.assertEqual(result.details['response_code'], 0)


class MalwareScanningServiceTestCase(TestCase):
    """Test main malware scanning service."""
    
    def setUp(self):
        """Set up test data."""
        self.test_content = b"This is a test file"
        self.uploaded_file = SimpleUploadedFile(
            "test.txt",
            self.test_content,
            content_type="text/plain"
        )
    
    @patch('api.services.malware_scanning_service.ClamAVScanner')
    @patch('api.services.malware_scanning_service.VirusTotalScanner')
    def test_scan_with_all_scanners(self, mock_vt_class, mock_clamav_class):
        """Test scanning with all scanners available."""
        # Mock scanners
        mock_clamav = Mock()
        mock_clamav.enabled = True
        mock_clamav.scan_file.return_value = MalwareScanResult(
            is_clean=True, scanner='clamav', scan_time=1.0
        )
        mock_clamav_class.return_value = mock_clamav
        
        mock_vt = Mock()
        mock_vt.enabled = True
        mock_vt.scan_file_hash.return_value = MalwareScanResult(
            is_clean=True, scanner='virustotal', scan_time=0.5
        )
        mock_vt_class.return_value = mock_vt
        
        service = MalwareScanningService()
        results = service.scan_file(self.uploaded_file, cache_results=False)
        
        self.assertIn('clamav', results)
        self.assertIn('virustotal', results)
        self.assertTrue(results['clamav'].is_clean)
        self.assertTrue(results['virustotal'].is_clean)
    
    @patch('api.services.malware_scanning_service.ClamAVScanner')
    @patch('api.services.malware_scanning_service.VirusTotalScanner')
    def test_scan_with_no_scanners(self, mock_vt_class, mock_clamav_class):
        """Test scanning when no scanners are available."""
        # Mock disabled scanners
        mock_clamav = Mock()
        mock_clamav.enabled = False
        mock_clamav_class.return_value = mock_clamav
        
        mock_vt = Mock()
        mock_vt.enabled = False
        mock_vt_class.return_value = mock_vt
        
        service = MalwareScanningService()
        results = service.scan_file(self.uploaded_file, cache_results=False)
        
        self.assertIn('basic', results)
        self.assertTrue(results['basic'].is_clean)
        self.assertEqual(results['basic'].scanner, 'basic_pattern')
    
    def test_file_clean_determination(self):
        """Test determining if file is clean from scan results."""
        service = MalwareScanningService()
        
        # All scanners report clean
        clean_results = {
            'scanner1': MalwareScanResult(is_clean=True, scanner='scanner1'),
            'scanner2': MalwareScanResult(is_clean=True, scanner='scanner2')
        }
        is_clean, threats = service.is_file_clean(clean_results)
        self.assertTrue(is_clean)
        self.assertEqual(threats, [])
        
        # One scanner finds threats
        infected_results = {
            'scanner1': MalwareScanResult(is_clean=True, scanner='scanner1'),
            'scanner2': MalwareScanResult(
                is_clean=False, 
                scanner='scanner2',
                threats=[{'threat': 'EICAR-Test-File'}]
            )
        }
        is_clean, threats = service.is_file_clean(infected_results)
        self.assertFalse(is_clean)
        self.assertEqual(len(threats), 1)
    
    def test_basic_pattern_scan_clean(self):
        """Test basic pattern scanning with clean file."""
        service = MalwareScanningService()
        result = service._basic_pattern_scan(self.uploaded_file)
        
        self.assertTrue(result.is_clean)
        self.assertEqual(result.scanner, 'basic_pattern')
        self.assertEqual(result.threats, [])
    
    def test_basic_pattern_scan_suspicious(self):
        """Test basic pattern scanning with suspicious content."""
        suspicious_file = SimpleUploadedFile(
            "malicious.html",
            b"<script>alert('xss')</script>",
            content_type="text/html"
        )
        
        service = MalwareScanningService()
        result = service._basic_pattern_scan(suspicious_file)
        
        self.assertFalse(result.is_clean)
        self.assertGreater(len(result.threats), 0)


class SecureFileHandlerTestCase(TestCase):
    """Test integration of malware scanning with file security."""
    
    def setUp(self):
        """Set up test data."""
        self.user = UserFactory()
        self.clean_image = SimpleUploadedFile(
            "test.jpg",
            b"fake_image_content_here",
            content_type="image/jpeg"
        )
    
    @patch('api.security.file_security.SecureFileHandler.scan_for_malware')
    @patch('api.security.file_security.SecureFileHandler._validate_image')
    @patch('api.security.file_security.SecureFileHandler._get_mime_type')
    def test_file_validation_with_clean_scan(self, mock_mime, mock_validate_image, mock_scan):
        """Test file validation when malware scan is clean."""
        mock_mime.return_value = 'image/jpeg'
        mock_scan.return_value = (True, {'is_clean': True, 'threats': []})
        
        # Should not raise exception
        SecureFileHandler._validate_file(self.clean_image, 'image')
    
    @patch('api.security.file_security.SecureFileHandler.scan_for_malware')
    @patch('api.security.file_security.SecureFileHandler._validate_image')
    @patch('api.security.file_security.SecureFileHandler._get_mime_type')
    def test_file_validation_with_infected_scan(self, mock_mime, mock_validate_image, mock_scan):
        """Test file validation when malware scan detects threats."""
        mock_mime.return_value = 'image/jpeg'
        mock_scan.return_value = (
            False, 
            {
                'is_clean': False, 
                'threats': [{'threat': 'EICAR-Test-File'}]
            }
        )
        
        with self.assertRaises(ValidationError) as context:
            SecureFileHandler._validate_file(self.clean_image, 'image')
        
        self.assertIn('malware scan', str(context.exception))
        self.assertIn('EICAR-Test-File', str(context.exception))


class MalwareScanLogTestCase(TestCase):
    """Test malware scan logging model."""
    
    def setUp(self):
        """Set up test data."""
        self.user = UserFactory()
    
    def test_create_scan_log(self):
        """Test creating a malware scan log entry."""
        log = MalwareScanLog.objects.create(
            user=self.user,
            file_hash='abcdef123456',
            file_name='test.jpg',
            file_size=1024,
            mime_type='image/jpeg',
            is_clean=True,
            scan_results={'clamav': {'is_clean': True}},
            threats_detected=[],
            scanners_used=['clamav'],
            total_scan_time=1.5
        )
        
        self.assertEqual(log.user, self.user)
        self.assertEqual(log.file_hash, 'abcdef123456')
        self.assertTrue(log.is_clean)
        self.assertEqual(log.scanners_used, ['clamav'])
        
        # Test string representation
        self.assertIn('test.jpg', str(log))
        self.assertIn('Clean', str(log))
    
    def test_infected_scan_log(self):
        """Test logging an infected file scan."""
        log = MalwareScanLog.objects.create(
            user=self.user,
            file_hash='fedcba654321',
            file_name='malware.exe',
            file_size=2048,
            mime_type='application/octet-stream',
            is_clean=False,
            scan_results={'clamav': {'is_clean': False}},
            threats_detected=[{'threat': 'Win32.Trojan'}],
            scanners_used=['clamav'],
            total_scan_time=2.1
        )
        
        self.assertFalse(log.is_clean)
        self.assertEqual(len(log.threats_detected), 1)
        self.assertEqual(log.threats_detected[0]['threat'], 'Win32.Trojan')
        
        # Test string representation
        self.assertIn('malware.exe', str(log))
        self.assertIn('Infected', str(log))