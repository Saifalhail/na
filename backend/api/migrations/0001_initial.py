# Generated by Django 5.2.4 on 2025-07-09 10:39

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Phone number in international format",
                        max_length=20,
                        verbose_name="phone number",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Used for age-specific nutritional recommendations",
                        null=True,
                        verbose_name="date of birth",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user has verified their email address.",
                        verbose_name="email verified",
                    ),
                ),
                (
                    "verification_token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Token used for email verification",
                        verbose_name="verification token",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of last successful login",
                        null=True,
                        verbose_name="last login IP",
                    ),
                ),
                (
                    "is_profile_public",
                    models.BooleanField(
                        default=False,
                        help_text="Whether the user profile is visible to other users",
                        verbose_name="public profile",
                    ),
                ),
                (
                    "account_type",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("premium", "Premium"),
                            ("professional", "Professional"),
                        ],
                        default="free",
                        help_text="User subscription level",
                        max_length=20,
                        verbose_name="account type",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="api_user_set",
                        related_query_name="api_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="api_user_set",
                        related_query_name="api_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="FoodItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="food name")),
                (
                    "brand",
                    models.CharField(blank=True, max_length=100, verbose_name="brand"),
                ),
                (
                    "barcode",
                    models.CharField(
                        blank=True, db_index=True, max_length=50, verbose_name="barcode"
                    ),
                ),
                (
                    "calories",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="calories"
                    ),
                ),
                (
                    "protein",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="protein (g)"
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="carbohydrates (g)"
                    ),
                ),
                (
                    "fat",
                    models.DecimalField(
                        decimal_places=2, max_digits=8, verbose_name="fat (g)"
                    ),
                ),
                (
                    "fiber",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=8,
                        verbose_name="fiber (g)",
                    ),
                ),
                (
                    "sugar",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=8,
                        verbose_name="sugar (g)",
                    ),
                ),
                (
                    "sodium",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=8,
                        verbose_name="sodium (mg)",
                    ),
                ),
                (
                    "saturated_fat",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="saturated fat (g)",
                    ),
                ),
                (
                    "trans_fat",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="trans fat (g)",
                    ),
                ),
                (
                    "cholesterol",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="cholesterol (mg)",
                    ),
                ),
                (
                    "potassium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="potassium (mg)",
                    ),
                ),
                (
                    "vitamin_a",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="vitamin A (%)",
                    ),
                ),
                (
                    "vitamin_c",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="vitamin C (%)",
                    ),
                ),
                (
                    "calcium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="calcium (%)",
                    ),
                ),
                (
                    "iron",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="iron (%)",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("ai", "AI Analysis"),
                            ("database", "Food Database"),
                            ("manual", "Manual Entry"),
                            ("usda", "USDA Database"),
                        ],
                        max_length=20,
                        verbose_name="data source",
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        help_text="ID from external database",
                        max_length=100,
                        verbose_name="external ID",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(default=False, verbose_name="verified"),
                ),
                ("is_public", models.BooleanField(default=True, verbose_name="public")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_food_items",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "food item",
                "verbose_name_plural": "food items",
                "db_table": "food_items",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Meal",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="meal name")),
                (
                    "meal_type",
                    models.CharField(
                        choices=[
                            ("breakfast", "Breakfast"),
                            ("lunch", "Lunch"),
                            ("dinner", "Dinner"),
                            ("snack", "Snack"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                        verbose_name="meal type",
                    ),
                ),
                ("consumed_at", models.DateTimeField(verbose_name="consumed at")),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="meal_images/",
                        verbose_name="meal image",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "location_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="longitude",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "meal",
                "verbose_name_plural": "meals",
                "db_table": "meals",
                "ordering": ["-consumed_at"],
            },
        ),
        migrations.CreateModel(
            name="FavoriteMeal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Custom name for this favorite",
                        max_length=255,
                        verbose_name="custom name",
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False,
                        help_text="Use this meal as a template for creating new meals",
                        verbose_name="use as template",
                    ),
                ),
                (
                    "quick_add_order",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Order in quick add list (lower numbers appear first)",
                        verbose_name="quick add order",
                    ),
                ),
                (
                    "times_used",
                    models.PositiveIntegerField(default=0, verbose_name="times used"),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last used"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorite_meals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "meal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="api.meal",
                    ),
                ),
            ],
            options={
                "verbose_name": "favorite meal",
                "verbose_name_plural": "favorite meals",
                "db_table": "favorite_meals",
                "ordering": ["quick_add_order", "-last_used"],
            },
        ),
        migrations.CreateModel(
            name="MealAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "ai_service",
                    models.CharField(
                        choices=[
                            ("gemini", "Google Gemini"),
                            ("openai", "OpenAI"),
                            ("claude", "Claude"),
                        ],
                        default="gemini",
                        max_length=20,
                        verbose_name="AI service",
                    ),
                ),
                (
                    "ai_response",
                    models.JSONField(
                        default=dict,
                        help_text="Raw response from AI service",
                        verbose_name="AI response",
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="AI confidence in the analysis (0-1)",
                        max_digits=3,
                        null=True,
                        verbose_name="confidence score",
                    ),
                ),
                (
                    "analysis_time_ms",
                    models.PositiveIntegerField(
                        help_text="Time taken for analysis in milliseconds",
                        verbose_name="analysis time (ms)",
                    ),
                ),
                (
                    "tokens_used",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of AI tokens consumed",
                        verbose_name="tokens used",
                    ),
                ),
                (
                    "is_accurate",
                    models.BooleanField(
                        blank=True,
                        help_text="User feedback on accuracy",
                        null=True,
                        verbose_name="marked as accurate",
                    ),
                ),
                (
                    "user_notes",
                    models.TextField(
                        blank=True,
                        help_text="User corrections or notes",
                        verbose_name="user notes",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "meal",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analysis",
                        to="api.meal",
                    ),
                ),
            ],
            options={
                "verbose_name": "meal analysis",
                "verbose_name_plural": "meal analyses",
                "db_table": "meal_analyses",
            },
        ),
        migrations.CreateModel(
            name="MealItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.001)],
                        verbose_name="quantity",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        default="g",
                        help_text="Unit of measurement (g, ml, cup, etc.)",
                        max_length=50,
                        verbose_name="unit",
                    ),
                ),
                (
                    "calories",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="calories",
                    ),
                ),
                (
                    "protein",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="protein (g)",
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="carbohydrates (g)",
                    ),
                ),
                (
                    "fat",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="fat (g)",
                    ),
                ),
                (
                    "fiber",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="fiber (g)",
                    ),
                ),
                (
                    "sugar",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="sugar (g)",
                    ),
                ),
                (
                    "sodium",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="sodium (mg)",
                    ),
                ),
                (
                    "custom_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="custom name"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "food_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="meal_occurrences",
                        to="api.fooditem",
                    ),
                ),
                (
                    "meal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meal_items",
                        to="api.meal",
                    ),
                ),
            ],
            options={
                "verbose_name": "meal item",
                "verbose_name_plural": "meal items",
                "db_table": "meal_items",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="NutritionalInfo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "vitamin_a_iu",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin A (IU)",
                    ),
                ),
                (
                    "vitamin_a_rae",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin A (mcg RAE)",
                    ),
                ),
                (
                    "vitamin_c",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin C (mg)",
                    ),
                ),
                (
                    "vitamin_d",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin D (mcg)",
                    ),
                ),
                (
                    "vitamin_e",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin E (mg)",
                    ),
                ),
                (
                    "vitamin_k",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin K (mcg)",
                    ),
                ),
                (
                    "thiamin",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=10,
                        null=True,
                        verbose_name="thiamin (mg)",
                    ),
                ),
                (
                    "riboflavin",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=10,
                        null=True,
                        verbose_name="riboflavin (mg)",
                    ),
                ),
                (
                    "niacin",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="niacin (mg)",
                    ),
                ),
                (
                    "vitamin_b6",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin B6 (mg)",
                    ),
                ),
                (
                    "folate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="folate (mcg)",
                    ),
                ),
                (
                    "vitamin_b12",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="vitamin B12 (mcg)",
                    ),
                ),
                (
                    "calcium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="calcium (mg)",
                    ),
                ),
                (
                    "iron",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="iron (mg)",
                    ),
                ),
                (
                    "magnesium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="magnesium (mg)",
                    ),
                ),
                (
                    "phosphorus",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="phosphorus (mg)",
                    ),
                ),
                (
                    "potassium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="potassium (mg)",
                    ),
                ),
                (
                    "sodium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="sodium (mg)",
                    ),
                ),
                (
                    "zinc",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="zinc (mg)",
                    ),
                ),
                (
                    "omega_3",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=10,
                        null=True,
                        verbose_name="omega-3 (g)",
                    ),
                ),
                (
                    "omega_6",
                    models.DecimalField(
                        blank=True,
                        decimal_places=3,
                        max_digits=10,
                        null=True,
                        verbose_name="omega-6 (g)",
                    ),
                ),
                (
                    "water",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="water (g)",
                    ),
                ),
                (
                    "caffeine",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="caffeine (mg)",
                    ),
                ),
                (
                    "alcohol",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="alcohol (g)",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="data source"
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(auto_now=True, verbose_name="last updated"),
                ),
                (
                    "food_item",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detailed_nutrition",
                        to="api.fooditem",
                    ),
                ),
                (
                    "meal",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="detailed_nutrition",
                        to="api.meal",
                    ),
                ),
            ],
            options={
                "verbose_name": "nutritional information",
                "verbose_name_plural": "nutritional information",
                "db_table": "nutritional_info",
            },
        ),
        migrations.CreateModel(
            name="NutritionData",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(upload_to="nutrition_images/")),
                ("gemini_response", models.JSONField(blank=True, default=dict)),
                (
                    "calories",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "protein",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "fat",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "fiber",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "sugar",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "sodium",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("serving_size", models.CharField(blank=True, max_length=100)),
                (
                    "servings_per_recipe",
                    models.DecimalField(decimal_places=2, default=1, max_digits=5),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="nutrition_data",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="RecipeIngredient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("unit", models.CharField(max_length=50)),
                (
                    "calories",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "protein",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "fat",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "nutrition_data",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ingredients",
                        to="api.nutritiondata",
                    ),
                ),
            ],
            options={
                "ordering": ["id"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="profile",
                        serialize=False,
                        to="api.user",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Male"),
                            ("F", "Female"),
                            ("O", "Other"),
                            ("N", "Prefer not to say"),
                        ],
                        help_text="Used for nutritional calculations",
                        max_length=1,
                        verbose_name="gender",
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Height in centimeters",
                        max_digits=5,
                        null=True,
                        verbose_name="height",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Weight in kilograms",
                        max_digits=5,
                        null=True,
                        verbose_name="weight",
                    ),
                ),
                (
                    "activity_level",
                    models.CharField(
                        choices=[
                            ("sedentary", "Sedentary (little or no exercise)"),
                            (
                                "lightly_active",
                                "Lightly active (exercise 1-3 days/week)",
                            ),
                            (
                                "moderately_active",
                                "Moderately active (exercise 3-5 days/week)",
                            ),
                            ("very_active", "Very active (exercise 6-7 days/week)"),
                            ("extra_active", "Extra active (very hard exercise daily)"),
                        ],
                        default="moderately_active",
                        help_text="Physical activity level for calorie calculations",
                        max_length=20,
                        verbose_name="activity level",
                    ),
                ),
                (
                    "daily_calorie_goal",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Target daily calorie intake",
                        null=True,
                        verbose_name="daily calorie goal",
                    ),
                ),
                (
                    "daily_protein_goal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Target daily protein intake in grams",
                        max_digits=5,
                        null=True,
                        verbose_name="daily protein goal",
                    ),
                ),
                (
                    "daily_carbs_goal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Target daily carbohydrate intake in grams",
                        max_digits=5,
                        null=True,
                        verbose_name="daily carbohydrates goal",
                    ),
                ),
                (
                    "daily_fat_goal",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        help_text="Target daily fat intake in grams",
                        max_digits=5,
                        null=True,
                        verbose_name="daily fat goal",
                    ),
                ),
                (
                    "measurement_system",
                    models.CharField(
                        choices=[
                            ("metric", "Metric (kg, cm)"),
                            ("imperial", "Imperial (lbs, inches)"),
                        ],
                        default="metric",
                        help_text="Preferred measurement system",
                        max_length=10,
                        verbose_name="measurement system",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC",
                        help_text="User timezone for meal logging",
                        max_length=50,
                        verbose_name="timezone",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en",
                        help_text="Language preference for the app",
                        max_length=10,
                        verbose_name="preferred language",
                    ),
                ),
                (
                    "bio",
                    models.TextField(
                        blank=True,
                        help_text="A brief description about the user",
                        max_length=500,
                        verbose_name="biography",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        help_text="User profile picture",
                        null=True,
                        upload_to="avatars/",
                        verbose_name="avatar",
                    ),
                ),
                (
                    "receive_email_notifications",
                    models.BooleanField(
                        default=True, verbose_name="receive email notifications"
                    ),
                ),
                (
                    "receive_push_notifications",
                    models.BooleanField(
                        default=True, verbose_name="receive push notifications"
                    ),
                ),
                (
                    "show_nutritional_info_publicly",
                    models.BooleanField(
                        default=False,
                        help_text="Whether to display nutritional data on public profile",
                        verbose_name="show nutritional info publicly",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "bmi",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        editable=False,
                        help_text="Body Mass Index (calculated automatically)",
                        max_digits=4,
                        null=True,
                        verbose_name="BMI",
                    ),
                ),
                (
                    "bmr",
                    models.PositiveIntegerField(
                        blank=True,
                        editable=False,
                        help_text="Basal Metabolic Rate (calculated automatically)",
                        null=True,
                        verbose_name="BMR",
                    ),
                ),
                (
                    "tdee",
                    models.PositiveIntegerField(
                        blank=True,
                        editable=False,
                        help_text="Total Daily Energy Expenditure (calculated automatically)",
                        null=True,
                        verbose_name="TDEE",
                    ),
                ),
            ],
            options={
                "verbose_name": "user profile",
                "verbose_name_plural": "user profiles",
                "db_table": "user_profiles",
            },
        ),
        migrations.CreateModel(
            name="DietaryRestriction",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g., Peanuts, Gluten, Dairy, Vegetarian",
                        max_length=100,
                        verbose_name="restriction name",
                    ),
                ),
                (
                    "restriction_type",
                    models.CharField(
                        choices=[
                            ("allergy", "Allergy"),
                            ("intolerance", "Intolerance"),
                            ("preference", "Preference"),
                            ("religious", "Religious"),
                            ("medical", "Medical"),
                        ],
                        help_text="Type of dietary restriction",
                        max_length=20,
                        verbose_name="type",
                    ),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("mild", "Mild"),
                            ("moderate", "Moderate"),
                            ("severe", "Severe"),
                            ("life_threatening", "Life-threatening"),
                        ],
                        default="moderate",
                        help_text="Severity of the restriction",
                        max_length=20,
                        verbose_name="severity",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Additional information about this restriction",
                        verbose_name="notes",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this restriction is currently active",
                        verbose_name="active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="dietary_restrictions",
                        to="api.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "dietary restriction",
                "verbose_name_plural": "dietary restrictions",
                "db_table": "dietary_restrictions",
            },
        ),
        migrations.CreateModel(
            name="APIUsageLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "endpoint",
                    models.CharField(
                        help_text="The API endpoint that was called",
                        max_length=255,
                        verbose_name="API endpoint",
                    ),
                ),
                (
                    "method",
                    models.CharField(
                        help_text="HTTP method used (GET, POST, etc.)",
                        max_length=10,
                        verbose_name="HTTP method",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="IP address of the request", verbose_name="IP address"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True,
                        help_text="User agent string from the request",
                        verbose_name="user agent",
                    ),
                ),
                (
                    "request_body_size",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Size of the request body in bytes",
                        verbose_name="request body size",
                    ),
                ),
                (
                    "response_status_code",
                    models.PositiveIntegerField(
                        help_text="HTTP status code of the response",
                        verbose_name="response status code",
                    ),
                ),
                (
                    "response_time_ms",
                    models.PositiveIntegerField(
                        help_text="Time taken to process the request in milliseconds",
                        verbose_name="response time (ms)",
                    ),
                ),
                (
                    "ai_tokens_used",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Number of AI tokens consumed (for AI endpoints)",
                        verbose_name="AI tokens used",
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error message if the request failed",
                        verbose_name="error message",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="timestamp"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        help_text="User who made the request (null for anonymous)",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="api_usage_logs",
                        to="api.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "API usage log",
                "verbose_name_plural": "API usage logs",
                "db_table": "api_usage_logs",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="fooditem",
            index=models.Index(fields=["name"], name="food_items_name_7242ab_idx"),
        ),
        migrations.AddIndex(
            model_name="fooditem",
            index=models.Index(
                fields=["barcode"], name="food_items_barcode_e4c66c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="fooditem",
            index=models.Index(
                fields=["created_by", "created_at"],
                name="food_items_created_b370c4_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="meal",
            index=models.Index(
                fields=["user", "consumed_at"], name="meals_user_id_c48f80_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="meal",
            index=models.Index(fields=["meal_type"], name="meals_meal_ty_c7709b_idx"),
        ),
        migrations.AddIndex(
            model_name="meal",
            index=models.Index(fields=["created_at"], name="meals_created_327660_idx"),
        ),
        migrations.AddIndex(
            model_name="favoritemeal",
            index=models.Index(
                fields=["user", "quick_add_order"],
                name="favorite_me_user_id_b5438b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="favoritemeal",
            index=models.Index(
                fields=["user", "last_used"], name="favorite_me_user_id_75a3a1_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="favoritemeal",
            unique_together={("user", "meal")},
        ),
        migrations.AddIndex(
            model_name="mealanalysis",
            index=models.Index(
                fields=["created_at"], name="meal_analys_created_fe53ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="mealanalysis",
            index=models.Index(
                fields=["ai_service"], name="meal_analys_ai_serv_abb1ec_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userprofile",
            index=models.Index(
                fields=["created_at"], name="user_profil_created_26443b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["is_verified"], name="users_is_veri_63cd6e_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["account_type"], name="users_account_e502f1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["created_at"], name="users_created_6541e9_idx"),
        ),
        migrations.AddIndex(
            model_name="dietaryrestriction",
            index=models.Index(
                fields=["user", "is_active"], name="dietary_res_user_id_7cbd7e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="dietaryrestriction",
            index=models.Index(
                fields=["restriction_type"], name="dietary_res_restric_220ab0_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dietaryrestriction",
            unique_together={("user", "name")},
        ),
        migrations.AddIndex(
            model_name="apiusagelog",
            index=models.Index(
                fields=["user", "created_at"], name="api_usage_l_user_id_ec87c0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="apiusagelog",
            index=models.Index(
                fields=["endpoint", "created_at"], name="api_usage_l_endpoin_06771f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="apiusagelog",
            index=models.Index(
                fields=["ip_address", "created_at"],
                name="api_usage_l_ip_addr_a93030_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="apiusagelog",
            index=models.Index(
                fields=["response_status_code"], name="api_usage_l_respons_08acf6_idx"
            ),
        ),
    ]
