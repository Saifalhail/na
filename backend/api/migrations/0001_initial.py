# Generated by Django 5.2.4 on 2025-07-15 11:32

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        error_messages={
                            "unique": "A user with that email already exists."
                        },
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Phone number in international format",
                        max_length=20,
                        verbose_name="phone number",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="Used for age-specific nutritional recommendations",
                        null=True,
                        verbose_name="date of birth",
                    ),
                ),
                (
                    "is_verified",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user has verified their email address.",
                        verbose_name="email verified",
                    ),
                ),
                (
                    "verification_token",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Token used for email verification",
                        verbose_name="verification token",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address of last successful login",
                        null=True,
                        verbose_name="last login IP",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to.",
                        related_name="api_user_set",
                        related_query_name="api_user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="api_user_set",
                        related_query_name="api_user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "users",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BlacklistedToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "token_hash",
                    models.CharField(
                        help_text="SHA256 hash of the token",
                        max_length=64,
                        unique=True,
                        verbose_name="token hash",
                    ),
                ),
                (
                    "token_type",
                    models.CharField(
                        choices=[
                            ("access", "Access Token"),
                            ("refresh", "Refresh Token"),
                        ],
                        default="refresh",
                        help_text="Type of token",
                        max_length=10,
                        verbose_name="token type",
                    ),
                ),
                (
                    "reason",
                    models.CharField(
                        choices=[
                            ("logout", "User Logout"),
                            ("password_change", "Password Change"),
                            ("account_disabled", "Account Disabled"),
                            ("security_breach", "Security Breach"),
                        ],
                        default="logout",
                        help_text="Reason for blacklisting",
                        max_length=50,
                        verbose_name="reason",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="When the token would have expired",
                        verbose_name="expires at",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True,
                        help_text="IP address when token was blacklisted",
                        null=True,
                        verbose_name="IP address",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="blacklisted_tokens",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Blacklisted Token",
                "verbose_name_plural": "Blacklisted Tokens",
                "db_table": "api_blacklistedtoken",
            },
        ),
        migrations.CreateModel(
            name="DeviceToken",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "token",
                    models.TextField(
                        help_text="Push notification token", verbose_name="device token"
                    ),
                ),
                (
                    "platform",
                    models.CharField(
                        choices=[
                            ("ios", "iOS"),
                            ("android", "Android"),
                            ("web", "Web"),
                        ],
                        max_length=20,
                        verbose_name="platform",
                    ),
                ),
                (
                    "device_id",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="device ID"
                    ),
                ),
                (
                    "device_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="device name"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last used"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="device_tokens",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "device token",
                "verbose_name_plural": "device tokens",
                "db_table": "device_tokens",
            },
        ),
        migrations.CreateModel(
            name="FoodItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="food name")),
                (
                    "brand",
                    models.CharField(blank=True, max_length=100, verbose_name="brand"),
                ),
                (
                    "category",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="category"
                    ),
                ),
                (
                    "calories",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="calories",
                    ),
                ),
                (
                    "protein",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="protein (g)",
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="carbohydrates (g)",
                    ),
                ),
                (
                    "fat",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="fat (g)",
                    ),
                ),
                (
                    "fiber",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="fiber (g)",
                    ),
                ),
                (
                    "sugar",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="sugar (g)",
                    ),
                ),
                (
                    "sodium",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=6,
                        null=True,
                        verbose_name="sodium (mg)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "food item",
                "verbose_name_plural": "food items",
                "db_table": "food_items",
                "indexes": [
                    models.Index(fields=["name"], name="food_items_name_7242ab_idx"),
                    models.Index(fields=["brand"], name="food_items_brand_303ad8_idx"),
                    models.Index(
                        fields=["category"], name="food_items_categor_d07997_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Meal",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="meal name")),
                (
                    "meal_type",
                    models.CharField(
                        choices=[
                            ("breakfast", "Breakfast"),
                            ("lunch", "Lunch"),
                            ("dinner", "Dinner"),
                            ("snack", "Snack"),
                            ("other", "Other"),
                        ],
                        default="other",
                        max_length=20,
                        verbose_name="meal type",
                    ),
                ),
                ("consumed_at", models.DateTimeField(verbose_name="consumed at")),
                (
                    "image",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="meal_images/",
                        verbose_name="meal image",
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "location_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="location"
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="latitude",
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        blank=True,
                        decimal_places=6,
                        max_digits=9,
                        null=True,
                        verbose_name="longitude",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "meal",
                "verbose_name_plural": "meals",
                "db_table": "meals",
                "ordering": ["-consumed_at"],
            },
        ),
        migrations.CreateModel(
            name="MealAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gemini_response",
                    models.JSONField(
                        default=dict,
                        help_text="Raw response from Gemini AI",
                        verbose_name="Gemini response",
                    ),
                ),
                (
                    "confidence_overall",
                    models.IntegerField(
                        default=0,
                        help_text="0-100 confidence score",
                        verbose_name="overall confidence",
                    ),
                ),
                (
                    "confidence_ingredients",
                    models.IntegerField(
                        default=0,
                        help_text="0-100 confidence score",
                        verbose_name="ingredients confidence",
                    ),
                ),
                (
                    "confidence_portions",
                    models.IntegerField(
                        default=0,
                        help_text="0-100 confidence score",
                        verbose_name="portions confidence",
                    ),
                ),
                (
                    "analysis_context",
                    models.JSONField(
                        default=dict,
                        help_text="Context used for AI analysis",
                        verbose_name="analysis context",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "meal",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analysis",
                        to="api.meal",
                    ),
                ),
            ],
            options={
                "verbose_name": "meal analysis",
                "verbose_name_plural": "meal analyses",
                "db_table": "meal_analyses",
            },
        ),
        migrations.CreateModel(
            name="MealItem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "quantity",
                    models.DecimalField(
                        decimal_places=3,
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(0.001)],
                        verbose_name="quantity",
                    ),
                ),
                (
                    "unit",
                    models.CharField(
                        default="g",
                        help_text="Unit of measurement (g, ml, cup, etc.)",
                        max_length=50,
                        verbose_name="unit",
                    ),
                ),
                (
                    "calories",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="calories",
                    ),
                ),
                (
                    "protein",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="protein (g)",
                    ),
                ),
                (
                    "carbohydrates",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="carbohydrates (g)",
                    ),
                ),
                (
                    "fat",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="fat (g)",
                    ),
                ),
                (
                    "fiber",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="fiber (g)",
                    ),
                ),
                (
                    "sugar",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="sugar (g)",
                    ),
                ),
                (
                    "sodium",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=8,
                        null=True,
                        verbose_name="sodium (mg)",
                    ),
                ),
                (
                    "custom_name",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="custom name"
                    ),
                ),
                ("notes", models.TextField(blank=True, verbose_name="notes")),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "food_item",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="meal_occurrences",
                        to="api.fooditem",
                    ),
                ),
                (
                    "meal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="meal_items",
                        to="api.meal",
                    ),
                ),
            ],
            options={
                "verbose_name": "meal item",
                "verbose_name_plural": "meal items",
                "db_table": "meal_items",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("meal_reminder", "Meal Reminder"),
                            ("daily_summary", "Daily Summary"),
                            ("weekly_report", "Weekly Report"),
                            ("goal_achieved", "Goal Achieved"),
                            ("system", "System Notification"),
                        ],
                        max_length=50,
                        verbose_name="notification type",
                    ),
                ),
                ("title", models.CharField(max_length=200, verbose_name="title")),
                ("message", models.TextField(verbose_name="message")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("sent", "Sent"),
                            ("failed", "Failed"),
                            ("read", "Read"),
                            ("archived", "Archived"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "channel",
                    models.CharField(
                        choices=[
                            ("in_app", "In-App"),
                            ("email", "Email"),
                            ("push", "Push Notification"),
                        ],
                        default="in_app",
                        max_length=20,
                        verbose_name="delivery channel",
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("urgent", "Urgent"),
                        ],
                        default="medium",
                        max_length=10,
                        verbose_name="priority",
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data for the notification",
                        verbose_name="additional data",
                    ),
                ),
                (
                    "scheduled_for",
                    models.DateTimeField(
                        blank=True,
                        help_text="When this notification should be sent",
                        null=True,
                        verbose_name="scheduled for",
                    ),
                ),
                (
                    "sent_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="sent at"),
                ),
                (
                    "read_at",
                    models.DateTimeField(blank=True, null=True, verbose_name="read at"),
                ),
                (
                    "failed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="failed at"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(blank=True, verbose_name="error message"),
                ),
                (
                    "retry_count",
                    models.PositiveSmallIntegerField(
                        default=0, verbose_name="retry count"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "notification",
                "verbose_name_plural": "notifications",
                "db_table": "notifications",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="SubscriptionPlan",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="plan name"
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="price"
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD", max_length=3, verbose_name="currency"
                    ),
                ),
                (
                    "ai_analyses_per_month",
                    models.IntegerField(
                        default=0,
                        help_text="0 = unlimited",
                        verbose_name="AI analyses per month",
                    ),
                ),
                (
                    "stripe_price_id",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Stripe price ID"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(default=True, verbose_name="is active"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
            ],
            options={
                "verbose_name": "subscription plan",
                "verbose_name_plural": "subscription plans",
                "db_table": "subscription_plans",
                "indexes": [
                    models.Index(fields=["name"], name="subscriptio_name_15b4e6_idx"),
                    models.Index(
                        fields=["is_active"], name="subscriptio_is_acti_4d4352_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Subscription",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stripe_subscription_id",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe subscription ID",
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True, max_length=255, verbose_name="Stripe customer ID"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("inactive", "Inactive"),
                            ("canceled", "Canceled"),
                            ("past_due", "Past Due"),
                            ("trialing", "Trialing"),
                        ],
                        default="inactive",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "trial_start",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="trial start"
                    ),
                ),
                (
                    "trial_end",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="trial end"
                    ),
                ),
                (
                    "current_period_start",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="current period start"
                    ),
                ),
                (
                    "current_period_end",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="current period end"
                    ),
                ),
                (
                    "canceled_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="canceled at"
                    ),
                ),
                (
                    "cancel_at_period_end",
                    models.BooleanField(
                        default=False, verbose_name="cancel at period end"
                    ),
                ),
                (
                    "ai_analyses_used",
                    models.IntegerField(default=0, verbose_name="AI analyses used"),
                ),
                (
                    "ai_analyses_reset_date",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="AI analyses reset date"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "plan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="api.subscriptionplan",
                    ),
                ),
            ],
            options={
                "verbose_name": "subscription",
                "verbose_name_plural": "subscriptions",
                "db_table": "subscriptions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "stripe_payment_intent_id",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        unique=True,
                        verbose_name="Stripe payment intent ID",
                    ),
                ),
                (
                    "amount",
                    models.DecimalField(
                        decimal_places=2, max_digits=10, verbose_name="amount"
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="USD", max_length=3, verbose_name="currency"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                            ("canceled", "Canceled"),
                            ("refunded", "Refunded"),
                        ],
                        default="pending",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "description",
                    models.TextField(blank=True, verbose_name="description"),
                ),
                (
                    "failure_reason",
                    models.TextField(blank=True, verbose_name="failure reason"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "subscription_plan",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="api.subscriptionplan",
                    ),
                ),
            ],
            options={
                "verbose_name": "payment",
                "verbose_name_plural": "payments",
                "db_table": "payments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "gender",
                    models.CharField(
                        blank=True,
                        choices=[("M", "Male"), ("F", "Female"), ("O", "Other")],
                        max_length=1,
                        verbose_name="gender",
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="height (cm)",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="weight (kg)",
                    ),
                ),
                (
                    "bmi",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=4,
                        null=True,
                        verbose_name="BMI",
                    ),
                ),
                (
                    "bmr",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="BMR (calories/day)"
                    ),
                ),
                (
                    "tdee",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="TDEE (calories/day)"
                    ),
                ),
                (
                    "activity_level",
                    models.CharField(
                        choices=[
                            ("sedentary", "Sedentary (little/no exercise)"),
                            (
                                "lightly_active",
                                "Lightly active (light exercise 1-3 days/week)",
                            ),
                            (
                                "moderately_active",
                                "Moderately active (moderate exercise 3-5 days/week)",
                            ),
                            (
                                "very_active",
                                "Very active (hard exercise 6-7 days/week)",
                            ),
                            (
                                "extra_active",
                                "Extra active (very hard exercise, 2x/day)",
                            ),
                        ],
                        default="moderately_active",
                        max_length=20,
                        verbose_name="activity level",
                    ),
                ),
                (
                    "goal",
                    models.CharField(
                        choices=[
                            ("maintain", "Maintain current weight"),
                            ("lose", "Lose weight"),
                            ("gain", "Gain weight"),
                            ("muscle", "Build muscle"),
                        ],
                        default="maintain",
                        max_length=20,
                        verbose_name="goal",
                    ),
                ),
                (
                    "timezone",
                    models.CharField(
                        default="UTC", max_length=50, verbose_name="timezone"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "user profile",
                "verbose_name_plural": "user profiles",
                "db_table": "user_profiles",
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["is_verified"], name="users_is_veri_63cd6e_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["created_at"], name="users_created_6541e9_idx"),
        ),
        migrations.AddIndex(
            model_name="blacklistedtoken",
            index=models.Index(
                fields=["token_hash"], name="api_blackli_token_h_b1736d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blacklistedtoken",
            index=models.Index(
                fields=["user", "created_at"], name="api_blackli_user_id_e3ff1d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="blacklistedtoken",
            index=models.Index(
                fields=["expires_at"], name="api_blackli_expires_a981db_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="devicetoken",
            index=models.Index(
                fields=["user", "is_active"], name="device_toke_user_id_e99165_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="devicetoken",
            index=models.Index(
                fields=["platform"], name="device_toke_platfor_c289af_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="devicetoken",
            index=models.Index(
                fields=["created_at"], name="device_toke_created_390e1b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="devicetoken",
            unique_together={("user", "token")},
        ),
        migrations.AddIndex(
            model_name="meal",
            index=models.Index(
                fields=["user", "consumed_at"], name="meals_user_id_c48f80_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="meal",
            index=models.Index(
                fields=["user", "meal_type"], name="meals_user_id_90570f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="meal",
            index=models.Index(fields=["created_at"], name="meals_created_327660_idx"),
        ),
        migrations.AddIndex(
            model_name="mealanalysis",
            index=models.Index(fields=["meal"], name="meal_analys_meal_id_7ec7f3_idx"),
        ),
        migrations.AddIndex(
            model_name="mealanalysis",
            index=models.Index(
                fields=["created_at"], name="meal_analys_created_fe53ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["user", "status"], name="notificatio_user_id_8ab96f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["user", "type"], name="notificatio_user_id_6b5847_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["scheduled_for", "status"],
                name="notificatio_schedul_ce73c9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="notification",
            index=models.Index(
                fields=["created_at"], name="notificatio_created_e4c995_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["user", "status"], name="subscriptio_user_id_8d58fd_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["stripe_subscription_id"], name="subscriptio_stripe__aa726e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="subscription",
            index=models.Index(
                fields=["current_period_end"], name="subscriptio_current_0ac39a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["user", "status"], name="payments_user_id_1b771c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["stripe_payment_intent_id"], name="payments_stripe__6cb0ea_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["created_at"], name="payments_created_e3a130_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="userprofile",
            index=models.Index(
                fields=["created_at"], name="user_profil_created_26443b_idx"
            ),
        ),
    ]
